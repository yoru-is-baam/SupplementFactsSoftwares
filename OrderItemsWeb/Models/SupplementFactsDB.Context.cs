//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderItemsWeb.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DevConn : DbContext
    {
        public DevConn()
            : base("name=DevConn")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<IncludeImportedProduct> IncludeImportedProducts { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<WarehouseReceipt> WarehouseReceipts { get; set; }
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<IncludeOrderProduct> IncludeOrderProducts { get; set; }
        public virtual DbSet<OrderReceipt> OrderReceipts { get; set; }
    
        public virtual int spIncludeImportedProducts(Nullable<int> totalProductQuantity, Nullable<int> totalProductPrice, Nullable<int> receiptId, string productId)
        {
            var totalProductQuantityParameter = totalProductQuantity.HasValue ?
                new ObjectParameter("totalProductQuantity", totalProductQuantity) :
                new ObjectParameter("totalProductQuantity", typeof(int));
    
            var totalProductPriceParameter = totalProductPrice.HasValue ?
                new ObjectParameter("totalProductPrice", totalProductPrice) :
                new ObjectParameter("totalProductPrice", typeof(int));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("receiptId", receiptId) :
                new ObjectParameter("receiptId", typeof(int));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spIncludeImportedProducts", totalProductQuantityParameter, totalProductPriceParameter, receiptIdParameter, productIdParameter);
        }
    
        public virtual int spProductCreate(string productId, string productName, Nullable<int> productPrice, Nullable<int> productQuantity)
        {
            var productIdParameter = productId != null ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("productPrice", productPrice) :
                new ObjectParameter("productPrice", typeof(int));
    
            var productQuantityParameter = productQuantity.HasValue ?
                new ObjectParameter("productQuantity", productQuantity) :
                new ObjectParameter("productQuantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProductCreate", productIdParameter, productNameParameter, productPriceParameter, productQuantityParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spWarehouseReceipt(Nullable<int> totalWarehouseQuantity, Nullable<int> totalWarehousePrice, Nullable<System.DateTime> createdDate)
        {
            var totalWarehouseQuantityParameter = totalWarehouseQuantity.HasValue ?
                new ObjectParameter("totalWarehouseQuantity", totalWarehouseQuantity) :
                new ObjectParameter("totalWarehouseQuantity", typeof(int));
    
            var totalWarehousePriceParameter = totalWarehousePrice.HasValue ?
                new ObjectParameter("totalWarehousePrice", totalWarehousePrice) :
                new ObjectParameter("totalWarehousePrice", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spWarehouseReceipt", totalWarehouseQuantityParameter, totalWarehousePriceParameter, createdDateParameter);
        }
    }
}
